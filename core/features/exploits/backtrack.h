#pragma once
#include "../../../dependencies/utilities/csgo.hpp"

struct stored_records {
	vec3_t head;
	float simulation_time;
	matrix_t matrix[128];
};

struct convars {
	convar* update_rate;
	convar* max_update_rate;
	convar* interp;
	convar* interp_ratio;
	convar* min_interp_ratio;
	convar* max_interp_ratio;
	convar* max_unlag;
};

extern std::deque<stored_records> records[65];
extern std::deque<stored_records> extended_records[65];

class backtracks {
public:
	void update() noexcept;
	float lerp_time() noexcept;
	bool is_tick_valid(float simtime, float maxtime) noexcept;
	bool valid_tick(float simtime);
	void backtrack_run(c_usercmd*) noexcept;
	static void initialize_backtrack() {
		records->clear();

		auto update_rate = interfaces::console->get_convar("cl_updaterate");
		auto max_update_rate = interfaces::console->get_convar("sv_maxupdaterate");
		auto interp = interfaces::console->get_convar("cl_interp");
		auto interp_ratio = interfaces::console->get_convar("cl_interp_ratio");
		auto min_interp_ratio = interfaces::console->get_convar("sv_client_min_interp_ratio");
		auto max_interp_ratio = interfaces::console->get_convar("sv_client_max_interp_ratio");
		auto max_unlag = interfaces::console->get_convar("sv_maxunlag");
	}
};
extern backtracks backtrack;